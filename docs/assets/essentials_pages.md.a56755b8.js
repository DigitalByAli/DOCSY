import{_ as s,o as a,c as n,a as l}from"./app.832d160e.js";const h=JSON.parse('{"title":"Pages","description":"","frontmatter":{},"headers":[{"level":2,"title":"Basic page","slug":"basic-page","link":"#basic-page","children":[]},{"level":2,"title":"URL Parameters","slug":"url-parameters","link":"#url-parameters","children":[]},{"level":2,"title":"Optional parameters","slug":"optional-parameters","link":"#optional-parameters","children":[{"level":3,"title":"Navigate","slug":"navigate","link":"#navigate","children":[]}]}],"relativePath":"essentials/pages.md"}'),p={name:"essentials/pages.md"},e=l(`<h1 id="pages" tabindex="-1">Pages <a class="header-anchor" href="#pages" aria-hidden="true">#</a></h1><p>All page files should be kept in the <code>/views</code> folder and be suffixed with <code>*.page.ts</code>.</p><h2 id="basic-page" tabindex="-1">Basic page <a class="header-anchor" href="#basic-page" aria-hidden="true">#</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">BasePage</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;oksy&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">default</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">HelloWorld</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">extends</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">BasePage</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">URL</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;/&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">view</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> [</span></span>
<span class="line"><span style="color:#D4D4D4;">            </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#4FC1FF;">UI</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Text</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#9CDCFE;">label:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;Your journey starts here \u{1F9D1}\u200D\u{1F680}&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">                </span><span style="color:#9CDCFE;">class:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;text-xl&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">            })</span></span>
<span class="line"><span style="color:#D4D4D4;">        ];</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>Each page should extend from the <code>BasePage</code> class and specify the <code>URL</code> and <code>view</code> properties.</p><h2 id="url-parameters" tabindex="-1">URL Parameters <a class="header-anchor" href="#url-parameters" aria-hidden="true">#</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">MealEdit</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">extends</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">BasePage</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">URL</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;/customer/:customerId&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">init</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">customerId</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">customer</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">database</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getById</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Customer&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">customerId</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">customer</span><span style="color:#D4D4D4;"> === </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>The <code>init</code> function is called before the page is rendered. The parameters of the URL are passed in as arguments. If the <code>init</code> function returns a <code>false</code> then a <code>404</code> page will be rendered to the user.</p><h2 id="optional-parameters" tabindex="-1">Optional parameters <a class="header-anchor" href="#optional-parameters" aria-hidden="true">#</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki has-highlighted-lines"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">class</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">MealEdit</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">extends</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">BasePage</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line highlighted"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">static</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">URL</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;/customer/:customerId?&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">init</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">customerId</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">undefined</span><span style="color:#D4D4D4;"> | </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">) { ... }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>If the URL parameter ends with a <code>?</code> then the parameter is optional and could be <code>undefined</code> in the <code>init</code> function.</p><h3 id="navigate" tabindex="-1">Navigate <a class="header-anchor" href="#navigate" aria-hidden="true">#</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#4FC1FF;">UI</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">Button</span><span style="color:#D4D4D4;">({</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">label:</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&#39;Click me!&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#DCDCAA;">onClick</span><span style="color:#9CDCFE;">:</span><span style="color:#D4D4D4;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">        </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">client</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">navigate</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;https://google.com&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;blank&#39;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">navigate</span><span style="color:#D4D4D4;"> = (</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">url</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">type</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;push&#39;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&#39;replace&#39;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&#39;hard&#39;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&#39;blank&#39;</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;push&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">void</span></span>
<span class="line"></span></code></pre></div>`,14),o=[e];function t(D,c,r,y,i,C){return a(),n("div",null,o)}const u=s(p,[["render",t]]);export{h as __pageData,u as default};
